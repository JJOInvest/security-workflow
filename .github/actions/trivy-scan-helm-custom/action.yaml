name: 'Trivy Helm Chart Security Scan'
description: 'Scans Helm charts from specified public (or organization) repository for security vulnerabilities using Trivy'
inputs:
  CHART_FOLDER:
    description: 'Folder with Chart.yaml and templates'
    required: false
  CHART_VALUES:
    description: 'Values file for the Helm chart'
    required: true
  SERVICE_NAME:
    description: 'Name of the service being scanned'
    required: true
  DEFECTDOJO_URL:
    required: false
    description: 'DefectDojo URL'
  DEFECTDOJO_TOKEN:
    required: false
    description: 'DefectDojo API Key'
  CF_ACCESS_CLIENT_ID:
    required: false
    description: 'CF access client id'
  CF_ACCESS_CLIENT_SECRET:
    required: false
    description: 'CF access client secret'
  GH_TOKEN:
    required: false
    description: 'GitHub token for ghcr login'

outputs:
  images-list-b64:
    description: 'Base64 encoded JSON array of dependency images'
    value: ${{ steps.convert-images.outputs.images-list-b64 }}

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Helm fetch and template
      shell: bash
      run: |
        rm -f .trivy.yaml
        rm -f .trivyignore

        cp ${{ inputs.CHART_FOLDER }}/.trivy.yaml .trivy.yaml
        cp ${{ inputs.CHART_FOLDER }}/.trivyignore .trivyignore

        cd ${{ inputs.CHART_FOLDER }}
        helm dependency build

        helm template . \
          --values=${{ inputs.CHART_VALUES }} > \
          ${{ inputs.SERVICE_NAME }}.yaml

    - name: Convert dependency images to JSON array
      id: convert-images
      shell: bash
      run: |
        # Go to charts folder
        cd ${{ inputs.CHART_FOLDER }}

        # Extract images from the service yaml
        grep 'image:' ${{ inputs.SERVICE_NAME }}.yaml | while read -r line; do
          echo "$line" | sed -n 's/[[:space:]]*image:[[:space:]]*\(.*\)/\1/p'
        done > dependency-images.txt

        # Read all lines and create JSON array
        json_array=$(printf '%s\n' "$(cat dependency-images.txt)" | jq -R . | jq -s .)
        echo "Dependency images JSON array: $json_array"
        echo "$json_array" > dependency-images.json
        # Base64 encode the JSON content to avoid special character issues with GitHub Actions output
        images_list_b64=$(cat dependency-images.json | base64 -w 0)
        echo "images-list-b64=$images_list_b64" >> $GITHUB_OUTPUT
        # To decode this output in other steps: echo "${{ steps.convert-images.outputs.images-list-b64 }}" | base64 -d

        rm -f dependency-images.txt

    - name: Set values variable
      id: set-values
      shell: bash
      run: |
        CHART_VALUES=$(echo "${{ inputs.CHART_VALUES }}" | sed "s|^${{ inputs.CHART_FOLDER }}/||")
        # Remove .yaml extension if present
        CHART_VALUES="${CHART_VALUES%.yaml}"
        echo "CHART_VALUES after normalization: ${CHART_VALUES}"
        CHART_VALUES_NORMALIZED=$(echo "${CHART_VALUES}" | sed 's/\//-/g')
        echo "CHART_VALUES_NORMALIZED: ${CHART_VALUES_NORMALIZED}"
        echo "chart_values_normalized=${CHART_VALUES_NORMALIZED}" >> $GITHUB_OUTPUT
    
    - name: Run Trivy (JSON report)
      #джоба падает при старте по событию тега (актуально для продовых воркфлоу в продуктовых репах) и при пуше в main
      #при реализации QG через defectdojo необходимо закомметировать условие continue-on-error
      continue-on-error: ${{ !(github.ref_type == 'tag' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
      uses: aquasecurity/trivy-action@0.29.0
      with:
        scan-type: "config"
        hide-progress: true 
        format: "json"
        scan-ref: "${{ inputs.CHART_FOLDER }}/${{ inputs.SERVICE_NAME }}.yaml"
        output: "helm-${{ inputs.SERVICE_NAME }}-${{ steps.set-values.outputs.chart_values_normalized }}.json"
        severity: "CRITICAL" #QG только по критам
        exit-code: 2 # роняем джобу с кодом 2
    
    - name: Upload Trivy (JSON report)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: helm-${{ inputs.SERVICE_NAME }}-${{ steps.set-values.outputs.chart_values_normalized }}-json
        path: helm-${{ inputs.SERVICE_NAME }}-${{ steps.set-values.outputs.chart_values_normalized }}.json
        retention-days: 10
    
    - name: Run Trivy (HTML report)
      uses: aquasecurity/trivy-action@0.29.0
      env:
        TRIVY_SEVERITY: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      with:
        scan-type: "config"
        hide-progress: true
        format: "template"
        scan-ref: "${{ inputs.CHART_FOLDER }}/${{ inputs.SERVICE_NAME }}.yaml"
        template: "@$HOME/.local/bin/trivy-bin/contrib/html.tpl"
        output: "helm-${{ inputs.SERVICE_NAME }}-${{ steps.set-values.outputs.chart_values_normalized }}.html"
        exit-code: 0 # не роняем джобу
    
    - name: Upload Trivy (HTML report)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: helm-${{ inputs.SERVICE_NAME }}-${{ steps.set-values.outputs.chart_values_normalized }}-html
        path: helm-${{ inputs.SERVICE_NAME }}-${{ steps.set-values.outputs.chart_values_normalized }}.html
        retention-days: 10