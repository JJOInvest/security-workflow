inputs:
  defectdojo-url:
    required: true
    description: 'DefectDojo URL'
  defectdojo-token:
    required: true
    description: 'DefectDojo API Key'

runs:
  using: 'composite'
  steps:
    
    #Checkout current commit
    - name: Checkout
      uses: actions/checkout@v4
    
    #Scan current commit with gitleaks, generate JSON report and catch exit code    
    - name: Run gitleaks
      #джоба не падает при старте по событию тега (актуально для продовых воркфлоу в продуктовых репах) и при пуше в main в tf-репах
      continue-on-error: true
      shell: bash
      id: gitleaks_scan
      run: |        
        docker run --rm \
          -v $(pwd):/path \
          -w /path \
          --user $(id -u):$(id -g) \
          ghcr.io/gitleaks/gitleaks:latest \
          git --log-opts "-1" \
          -f json \
          -r "gitleaks-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}.json" \
          || SECRET_EXIT_CODE=$?

        if [ -z $SECRET_EXIT_CODE ]
          then
            echo "Secrets has not been found"
          exit 0
        elif [ $SECRET_EXIT_CODE = "1" ]
        then
          echo "########Secrets or error encountered########"
          exit 1
        else
          echo "Error has been occured"
        fi
        
    #- name: Set up Python 3.12
    #  id: setup_python
    #  uses: actions/setup-python@v4
    #  with:
    #    python-version: 3.12
    #- name: Install dependencies
    #  id: install_dependencies
    #  shell: bash
    #  run: |
    #    python -m pip install --upgrade pip
    #    pip install setuptools dd-import
    - name: Upload Gitleaks Report to DefectDojo
      shell: bash
      env:
        DD_URL: ${{ inputs.defectdojo-url }}
        DD_API_KEY: ${{ inputs.defectdojo-token }}
        DD_PRODUCT_TYPE_NAME: JJO
        DD_PRODUCT_NAME: ${{ github.event.repository.name }}
        DD_ENGAGEMENT_NAME: ${{ github.head_ref || github.ref_name }}
        DD_TEST_NAME: Gitleaks
        DD_TEST_TYPE_NAME: Gitleaks Scan
        DD_FILE_NAME: gitleaks-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}.json
        DD_AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
        DD_AWS_ACCESS_KEY_ID_VALUE: ${{ secrets.AWS_TEST_ACCESS_KEY }}
        DD_AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        DD_AWS_SECRET_ACCESS_KEY_VALUE: ${{ secrets.AWS_TEST_SECRET_ACCESS_KEY }}
      run: |
        ls -la $DD_FILE_NAME
        docker run --rm \
        -e DD_URL \
        -e DD_API_KEY \
        -e DD_PRODUCT_TYPE_NAME \
        -e DD_PRODUCT_NAME \
        -e DD_ENGAGEMENT_NAME \
        -e DD_TEST_NAME \
        -e DD_TEST_TYPE_NAME \
        -e DD_FILE_NAME \
        -e DD_AWS_ACCESS_KEY_ID \
        -e DD_AWS_ACCESS_KEY_ID_VALUE \
        -e DD_AWS_SECRET_ACCESS_KEY \
        -e DD_AWS_SECRET_ACCESS_KEY_VALUE \
        -v $(pwd):/usr/local/dd-import/results \
        maibornwolff/dd-import:latest dd-reimport-findings.sh

    - name: Upload gitleaks report to artifacts
      uses: actions/upload-artifact@v4
      #if: always()
      with:
        name: gitleaks-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}-json
        path: gitleaks-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}.json
        #retention-days: 1

    #- name: Download scan results artifact
    #  uses: actions/download-artifact@v4
    #  with:
    #    name: gitleaks-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}-json