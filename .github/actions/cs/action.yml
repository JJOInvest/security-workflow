inputs:
  GITHUB_REF:
    type: string
    required: true
  SERVICE_NAME:
    type: string
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set tool for scanning
      shell: bash
      run: |
        # Set tool for scanning

        repos_for_trivy_scan=("JJOInvest/backtest-service-java" \
                              "JJOInvest/activity-service-java" \
                              "JJOInvest/access-token-service"
                              "JJOInvest/tron-connector" \
                              "JJOInvest/jjo-invest-backend-v2")

        repos_for_grype_scan=("JJOInvest/exchange-connector-service-js" \
                              "JJOInvest/jjo-slack-bot" \
                              "JJOInvest/coop-landing-v2")

        scan_tool=""
        found=0

        for repo in "${repos_for_trivy_scan[@]}"; do
          if [[ "$repo" == "$GITHUB_REPOSITORY" ]]; then
            found=1
            scan_tool="trivy"
            break
          fi
        done

        if [[ $found -eq 0 ]]; then
          for repo in "${repos_for_grype_scan[@]}"; do
            if [[ "$repo" == "$GITHUB_REPOSITORY" ]]; then
              found=1
              scan_tool="grype"
              break
            fi
          done
        fi

        if [[ $found -eq 1 ]]; then
          echo "Scanning image from repository $GITHUB_REPOSITORY with $scan_tool."
          echo "scan_tool=$scan_tool" >> $GITHUB_OUTPUT
        else
          echo "For this repo image scan is not required!"
          echo "If you want to scan image from this repo, please add it in the appropriate file:"
          echo "https://github.com/JJOInvest/security-workflow/tree/main"
        fi
      id: tool_for_scanning
    - name: Extract tag name
      shell: bash
      run: |
        # Extract tag name

        echo "tag=${GITHUB_HEAD_REF:-${{ inputs.GITHUB_REF }}}" >> $GITHUB_OUTPUT
      id: extract_tag

    - name: Set env for Trivy (dev/test/prod)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      shell: bash
      run: |
        # Set env for Trivy (dev/test/prod)

        exit_code_env_trivy=0

        if [[ "$GITHUB_WORKFLOW" == *"prod"* ]]; then
          exit_code_env_trivy=1
          echo "Running image scan in prod"
          echo "If High or Critical vulnerabilities are found, the pipeline will fail"
        else
          echo "Running image scan in non-prod environment"
          echo "You can find reports in artifacts"
        fi

        echo "exit_code_env_trivy=$exit_code_env_trivy" >> $GITHUB_OUTPUT
      id: exit_code_env_trivy
    - name: Set env for Grype (dev/test/prod)
      if: steps.tool_for_scanning.outputs.scan_tool == 'grype'
      shell: bash
      run: |
        # Set env for Grype (dev/test/prod)

        exit_code_env_grype=""

        if [[ "$GITHUB_WORKFLOW" == *"prod"* ]]; then
          exit_code_env_grype="true"
          echo "Running image scan in prod"
          echo "If High or Critical vulnerabilities are found, the pipeline will fail"
        else
          exit_code_env_grype="false"
          echo "Running image scan in non-prod environment"
          echo "You can find reports in artifacts"
        fi

        echo "exit_code_env_grype=$exit_code_env_grype" >> $GITHUB_OUTPUT
      id: exit_code_env_grype

    - name: Run Trivy (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: "ghcr.io/jjoinvest/${{ inputs.SERVICE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
        format: "json"
        output: "${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.json"
        exit-code: 0
    - name: Upload Trivy (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}-json
        path: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.json
        retention-days: 1
    - name: Run Trivy (HTML report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: "ghcr.io/jjoinvest/${{ inputs.SERVICE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
        format: "template"
        template: "@$HOME/.local/bin/trivy-bin/contrib/html.tpl"
        output: "${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.html"
        severity: 'CRITICAL,HIGH'
        exit-code: ${{ steps.exit_code_env_trivy.outputs.exit_code_env_trivy }}
        skip-setup-trivy: true
    - name: Upload Trivy (HTML report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}-html
        path: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.html
        retention-days: 1

    - name: Run Grype (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'grype'
      uses: anchore/scan-action@v6
      with:
        image: "ghcr.io/jjoinvest/${{ inputs.SERVICE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
        output-format: "json"
        output-file: "${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.json"
        fail-build: "false"
    - name: Upload Grype (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'grype'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}-json
        path: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.json
        retention-days: 1
    - name: Run Grype (Text report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'grype'
      uses: anchore/scan-action@v6
      with:
        image: "ghcr.io/jjoinvest/${{ inputs.SERVICE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
        output-format: "table"
        output-file: "${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.txt"
        severity-cutoff: critical
        fail-build: ${{ steps.exit_code_env_grype.outputs.exit_code_env_grype }}
    - name: Upload Grype (Text report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'grype'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}-txt
        path: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.txt
        retention-days: 1