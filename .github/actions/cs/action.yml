# предлагаю в этом файле описать  логику выбора Trivy/Grype.
# В соответствии с тем, что используем, то и выбираем в качестве 
# actions. На вход условия подаем имя репозитория, а на вход action
# передаем список образов

inputs:
  GITHUB_REF:
    type: string
    required: true
  SERVICE_NAME:
    type: string
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set tool for scanning
      shell: bash
      run: |
        repos_for_trivy_scan=("JJOInvest/backtest-service-java" \
                              "JJOInvest/activity-service-java" \
                              "JJOInvest/access-token-service"
                              "JJOInvest/tron-connector")

        repos_for_grype_scan=("JJOInvest/exchange-connector-service-js" \
                              "JJOInvest/jjo-slack-bot" \
                              "JJOInvest/coop-landing-v2" \
                              "JJOInvest/jjo-invest-backend-v2")

        scan_tool=""
        found=0

        for repo in "${repos_for_trivy_scan[@]}"; do
          if [[ "$repo" == "$GITHUB_REPOSITORY" ]]; then
            found=1
            scan_tool="trivy"
            break
          fi
        done

        if [[ $found -eq 0 ]]; then
          for repo in "${repos_for_grype_scan[@]}"; do
            if [[ "$repo" == "$GITHUB_REPOSITORY" ]]; then
              found=1
              scan_tool="grype"
              break
            fi
          done
        fi

        if [[ $found -eq 1 ]]; then
          echo "Scanning image from repository $GITHUB_REPOSITORY with $scan_tool."
          echo "scan_tool=$scan_tool" >> $GITHUB_OUTPUT
        else
          echo "For this repo image scan is not required!"
          echo "If you want to scan image from this repo, please add it in the appropriate file:"
          echo "https://github.com/JJOInvest/security-workflow/tree/main"
        fi
      id: tool_for_scanning
    - name: Extract tag name
      shell: bash
      run: echo "tag=${GITHUB_HEAD_REF:-${{ inputs.GITHUB_REF }}}" >> $GITHUB_OUTPUT
      id: extract_tag

    - name: Run Trivy (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: "ghcr.io/jjoinvest/${{ inputs.SERVICE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
        format: "json"
        output: "${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.json"
    - name: Upload Trivy (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}-json
        path: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.json
        retention-days: 1
    - name: Run Trivy (HTML report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: "ghcr.io/jjoinvest/${{ inputs.SERVICE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
        format: "template"
        template: "@$HOME/.local/bin/trivy-bin/contrib/html.tpl"
        output: "${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.html"
        skip-setup-trivy: true
    - name: Upload Trivy (HTML report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'trivy'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}-html
        path: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.html
        retention-days: 1

    - name: Run Grype (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'grype'
      uses: anchore/scan-action@v6
      with:
        image: "ghcr.io/jjoinvest/${{ inputs.SERVICE_NAME }}:${{ steps.extract_tag.outputs.tag }}"
        output-format: "json"
        output-file: "${{ github.event.repository.name }}-${{ github.ref_name }}.json"
    - name: Upload Grype (JSON report)
      if: steps.tool_for_scanning.outputs.scan_tool == 'grype'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}-json
        path: ${{ inputs.SERVICE_NAME }}-${{ steps.extract_tag.outputs.tag }}.json
        retention-days: 1

    - name: Test var
      shell: bash
      run: |
        echo $GITHUB_WORKFLOW