inputs:
  CHART_NAME:
    type: string
    required: true
  CHART_VER:
    type: string
    required: true
  CHART_VALUES:
    type: string
    required: true
  SERVICE_NAME:
    type: string
    required: true
  DEFECTDOJO_URL:
    required: true
    description: 'DefectDojo URL'
  DEFECTDOJO_TOKEN:
    required: true
    description: 'DefectDojo API Key'
  CF_ACCESS_CLIENT_ID:
    required: true
    description: 'CF access client id'
  CF_ACCESS_CLIENT_SECRET:
    required: true
    description: 'CF access client secret'
  GH_TOKEN:
    required: true
    description: 'GitHub token for ghcr login'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Helm fetch and template
      shell: bash
      run: |
        helm fetch oci://ghcr.io/jjoinvest/jjo-helm-charts/${{ inputs.CHART_NAME }} \
          --version ${{ inputs.CHART_VER }} --untar

        helm template ${{ inputs.SERVICE_NAME }} ./${{ inputs.CHART_NAME }} \
          --values=${{ inputs.CHART_VALUES }} > \
          ${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.yaml
    
    - name: Run Trivy (JSON report)
      uses: aquasecurity/trivy-action@0.29.0
      with:
        scan-type: "config"
        hide-progress: true
        format: "json"
        scan-ref: "${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.yaml"
        output: "helm-${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.json"
        exit-code: 0
    
    - name: Upload Trivy (JSON report)
      uses: actions/upload-artifact@v4
      with:
        name: helm-${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}-json
        path: helm-${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.json
        retention-days: 1
    
    - name: Run Trivy (HTML report)
      uses: aquasecurity/trivy-action@0.29.0
      with:
        scan-type: "config"
        hide-progress: true
        format: "template"
        scan-ref: "${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.yaml"
        template: "@$HOME/.local/bin/trivy-bin/contrib/html.tpl"
        output: "helm-${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.html"
        # severity: 'CRITICAL,HIGH'
        # exit-code: ${{ steps.exit_code_env_trivy.outputs.exit_code_env_trivy }}
        skip-setup-trivy: true
    
    - name: Upload Trivy (HTML report)
      uses: actions/upload-artifact@v4
      with:
        name: helm-${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}-html
        path: helm-${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.html
        retention-days: 1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.GH_TOKEN }}

    - name: Pull dd-import image
      shell: bash
      run: |
        docker pull ghcr\.io/jjoinvest/dd-import-qg:v2.0

    - name: Upload Trivy Report to DefectDojo
      shell: bash
      env:
        DD_URL: ${{ inputs.DEFECTDOJO_URL }}
        DD_API_KEY: ${{ inputs.DEFECTDOJO_TOKEN }}
        DD_PRODUCT_TYPE_NAME: JJO
        DD_PRODUCT_NAME: ${{ github.event.repository.name }}
        DD_ENGAGEMENT_NAME: ${{ github.head_ref || github.ref_name }}
        DD_TEST_NAME: "Helm ${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }} scanning"
        DD_TEST_TYPE_NAME: Trivy Scan
        DD_FILE_NAME: ./results/helm-${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }}.json
        DD_EXTRA_HEADER_1: CF-Access-Client-Id
        DD_EXTRA_HEADER_1_VALUE: ${{ inputs.CF_ACCESS_CLIENT_ID }}
        DD_EXTRA_HEADER_2: CF-Access-Client-Secret
        DD_EXTRA_HEADER_2_VALUE: ${{ inputs.CF_ACCESS_CLIENT_SECRET }}
      run: |        
        docker run --rm \
        -e DD_URL \
        -e DD_API_KEY \
        -e DD_PRODUCT_TYPE_NAME \
        -e DD_PRODUCT_NAME \
        -e DD_ENGAGEMENT_NAME \
        -e DD_TEST_NAME \
        -e DD_TEST_TYPE_NAME \
        -e DD_FILE_NAME \
        -e DD_EXTRA_HEADER_1 \
        -e DD_EXTRA_HEADER_1_VALUE \
        -e DD_EXTRA_HEADER_2 \
        -e DD_EXTRA_HEADER_2_VALUE \
        -v $(pwd):/usr/local/dd-import/results \
        ghcr\.io/jjoinvest/dd-import-qg:v2.0 dd-reimport-findings.sh

    - name: Check Quality Gates
      #джоба падает при старте по событию тега (актуально для продовых воркфлоу в продуктовых репах) и при пуше в main
      continue-on-error: ${{ !(github.ref_type == 'tag' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
      shell: bash
      env:
        DD_URL: ${{ inputs.DEFECTDOJO_URL }}
        DD_API_KEY: ${{ inputs.DEFECTDOJO_TOKEN }}
        DD_PRODUCT_TYPE_NAME: JJO
        DD_PRODUCT_NAME: ${{ github.event.repository.name }}
        DD_ENGAGEMENT_NAME: ${{ github.head_ref || github.ref_name }}
        DD_TEST_NAME: "Helm ${{ inputs.SERVICE_NAME }}-${{ inputs.CHART_NAME }}-${{ inputs.CHART_VER }} scanning"
        DD_TEST_TYPE_NAME: Trivy Scan
        DD_EXTRA_HEADER_1: CF-Access-Client-Id
        DD_EXTRA_HEADER_1_VALUE: ${{ inputs.CF_ACCESS_CLIENT_ID }}
        DD_EXTRA_HEADER_2: CF-Access-Client-Secret
        DD_EXTRA_HEADER_2_VALUE: ${{ inputs.CF_ACCESS_CLIENT_SECRET }}
        #Значения QG - выставляем самостоятельно для каждой практики
        TOTAL_THRESHOLD: 0 #0 - значит, по данному параметру QG нет
        CRITICAL_THRESHOLD: 1
        HIGH_THRESHOLD: 5
        MEDIUM_THRESHOLD: 30
        LOW_THRESHOLD: 50 
        INFO_THRESHOLD: 0 #0 - значит, по данному параметру QG нет
      run: |        
        docker run --rm \
        -e DD_URL \
        -e DD_API_KEY \
        -e DD_PRODUCT_TYPE_NAME \
        -e DD_PRODUCT_NAME \
        -e DD_ENGAGEMENT_NAME \
        -e DD_TEST_NAME \
        -e DD_TEST_TYPE_NAME \
        -e DD_EXTRA_HEADER_1 \
        -e DD_EXTRA_HEADER_1_VALUE \
        -e DD_EXTRA_HEADER_2 \
        -e DD_EXTRA_HEADER_2_VALUE \
        -e TOTAL_THRESHOLD \
        -e CRITICAL_THRESHOLD \
        -e HIGH_THRESHOLD \
        -e MEDIUM_THRESHOLD \
        -e LOW_THRESHOLD \
        -e INFO_THRESHOLD \
        -v $(pwd):/usr/local/dd-import/results \
        ghcr\.io/jjoinvest/dd-import-qg:v2.0 dd-check-thresholds.sh  