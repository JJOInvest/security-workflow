inputs:
  defectdojo-url:
    required: true
    description: 'DefectDojo URL'
  defectdojo-token:
    required: true
    description: 'DefectDojo API Key'
  cf-access-client-id:
    required: true
    description: 'CF access client id'
  cf-access-client-secret:
    required: true
    description: 'CF access client secret'
  github-token:
    required: true
    description: 'GitHub token for ghcr login'

runs:
  using: 'composite'
  steps:      
    #Scan current commit with semgrep and generate JSON report  
    - name: Checkout
      uses: actions/checkout@v4
      

    - name: Run semgrep
      shell: bash
      id: semgrep_scan
      run: |
        docker run --rm -v .:/src -w /src \
        semgrep/semgrep \
        semgrep scan \
        --json \
        -o "semgrep-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}.json" \
        --config=p/xss \
        --config=p/gitlab \
        --config=p/default \
        --config=p/shadow-ai \
        --config=p/cwe-top-25 \
        --config=p/trailofbits \
        --config=p/owasp-top-ten \
        --config=p/security-audit \
        --config=p/php \
        --config=p/phpcs-security-audit \
        --config=p/golang \
        --config=p/semgrep-go-correctness \
        --config=p/expressjs \
        --config=p/react-best-practices \
        .

    - name: Upload Semgrep report to artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}-json
        path: semgrep-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}.json
        #retention-days: 1  
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Pull dd-import image
      shell: bash
      run: |
        docker pull ghcr.io/jjoinvest/dd-import-qg:latest

    - name: Upload Semgrep Report to DefectDojo
      shell: bash
      env:
        DD_URL: ${{ inputs.defectdojo-url }}
        DD_API_KEY: ${{ inputs.defectdojo-token }}
        DD_PRODUCT_TYPE_NAME: JJO
        DD_PRODUCT_NAME: ${{ github.event.repository.name }}
        DD_ENGAGEMENT_NAME: ${{ github.head_ref || github.ref_name }}
        DD_TEST_NAME: SAST (Semgrep)
        DD_TEST_TYPE_NAME: Semgrep JSON Report
        DD_FILE_NAME: ./results/semgrep-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}.json
        DD_EXTRA_HEADER_1: CF-Access-Client-Id
        DD_EXTRA_HEADER_1_VALUE: ${{ inputs.cf-access-client-id }}
        DD_EXTRA_HEADER_2: CF-Access-Client-Secret
        DD_EXTRA_HEADER_2_VALUE: ${{ inputs.cf-access-client-secret }}
      run: |
        docker run --rm \
        -e DD_URL \
        -e DD_API_KEY \
        -e DD_PRODUCT_TYPE_NAME \
        -e DD_PRODUCT_NAME \
        -e DD_ENGAGEMENT_NAME \
        -e DD_TEST_NAME \
        -e DD_TEST_TYPE_NAME \
        -e DD_FILE_NAME \
        -e DD_EXTRA_HEADER_1 \
        -e DD_EXTRA_HEADER_1_VALUE \
        -e DD_EXTRA_HEADER_2 \
        -e DD_EXTRA_HEADER_2_VALUE \
        -v $(pwd):/usr/local/dd-import/results \
        ghcr.io/jjoinvest/dd-import-qg:latest dd-reimport-findings.sh

    - name: Check Quality Gates
      continue-on-error: ${{ !(github.ref_type == 'tag' || github.ref == 'refs/heads/main') }}
      shell: bash
      env:
        DD_URL: ${{ inputs.defectdojo-url }}
        DD_API_KEY: ${{ inputs.defectdojo-token }}
        DD_PRODUCT_TYPE_NAME: JJO
        DD_PRODUCT_NAME: ${{ github.event.repository.name }}
        DD_ENGAGEMENT_NAME: ${{ github.head_ref || github.ref_name }}
        DD_TEST_NAME: SAST (Semgrep)
        DD_TEST_TYPE_NAME: Semgrep JSON Report
        DD_EXTRA_HEADER_1: CF-Access-Client-Id
        DD_EXTRA_HEADER_1_VALUE: ${{ inputs.cf-access-client-id }}
        DD_EXTRA_HEADER_2: CF-Access-Client-Secret
        DD_EXTRA_HEADER_2_VALUE: ${{ inputs.cf-access-client-secret }}
        #Значения QG - выставляем самостоятельно для каждой практики
        TOTAL_THRESHOLD: 100
        CRITICAL_THRESHOLD: 1
        HIGH_THRESHOLD: 1
        MEDIUM_THRESHOLD: 30
        LOW_THRESHOLD: 0 #0 - значит, по данному параметру QG нет
        INFO_THRESHOLD: 0 #0 - значит, по данному параметру QG нет
      run: |
        docker run --rm \
        -e DD_URL \
        -e DD_API_KEY \
        -e DD_PRODUCT_TYPE_NAME \
        -e DD_PRODUCT_NAME \
        -e DD_ENGAGEMENT_NAME \
        -e DD_TEST_NAME \
        -e DD_TEST_TYPE_NAME \
        -e DD_EXTRA_HEADER_1 \
        -e DD_EXTRA_HEADER_1_VALUE \
        -e DD_EXTRA_HEADER_2 \
        -e DD_EXTRA_HEADER_2_VALUE \
        -e TOTAL_THRESHOLD \
        -e CRITICAL_THRESHOLD \
        -e HIGH_THRESHOLD \
        -e MEDIUM_THRESHOLD \
        -e LOW_THRESHOLD \
        -e INFO_THRESHOLD \
        -v $(pwd):/usr/local/dd-import/results \
        ghcr.io/jjoinvest/dd-import-qg:latest dd-check-thresholds.sh
        